//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\pratapa.ADS\source\repos\LlvmDSCompiler\LlvmDSCompiler\DesignScript.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LlvmDSCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DesignScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, VAR=13, NEW=14, ERROR=15, BOOL=16, STRING=17, 
		DOUBLE=18, INT_=19, DEF=20, IN=21, IF=22, ELSE=23, NULL=24, RETURN=25, 
		FOR=26, WHILE=27, BREAK=28, CONTINUE=29, BoolLit=30, DoubleLit=31, IntLit=32, 
		Level=33, RepGuide=34, StringLit=35, Ident=36, WS=37, COMMENT=38, LINE_COMMENT=39, 
		LBRACK=40, RBRACK=41, DOTDOT=42, ADDADD=43, SUBSUB=44, ADD=45, SUB=46, 
		MUL=47, DIV=48, MOD=49, NOT=50, AND=51, OR=52, GT=53, GE=54, LT=55, LE=56, 
		NE=57, EQ=58;
	public const int
		RULE_program = 0, RULE_coreStmt = 1, RULE_funcDef = 2, RULE_imperFuncDef = 3, 
		RULE_emptyStmt = 4, RULE_funcDefArgList = 5, RULE_funcDefArg = 6, RULE_expr = 7, 
		RULE_primary = 8, RULE_parExpr = 9, RULE_lit = 10, RULE_exprList = 11, 
		RULE_atLevel = 12, RULE_repGuideList = 13, RULE_exprStmt = 14, RULE_returnStmt = 15, 
		RULE_imperAnnot = 16, RULE_imperBlock = 17, RULE_imperBlockReturnStmt = 18, 
		RULE_imperBlockAssignStmt = 19, RULE_imperBlockBody = 20, RULE_imperStmt = 21, 
		RULE_assignStmt = 22, RULE_typedIdent = 23, RULE_keyValue = 24, RULE_keyValues = 25, 
		RULE_typedIdentList = 26, RULE_identList = 27, RULE_qualifiedIdent = 28, 
		RULE_typeNameWithRank = 29, RULE_typeName = 30;
	public static readonly string[] ruleNames = {
		"program", "coreStmt", "funcDef", "imperFuncDef", "emptyStmt", "funcDefArgList", 
		"funcDefArg", "expr", "primary", "parExpr", "lit", "exprList", "atLevel", 
		"repGuideList", "exprStmt", "returnStmt", "imperAnnot", "imperBlock", 
		"imperBlockReturnStmt", "imperBlockAssignStmt", "imperBlockBody", "imperStmt", 
		"assignStmt", "typedIdent", "keyValue", "keyValues", "typedIdentList", 
		"identList", "qualifiedIdent", "typeNameWithRank", "typeName"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'{'", "'}'", "','", "'='", "'.'", "'#'", "'?'", 
		"':'", "'Imperative'", "'var'", "'new'", "'error'", "'bool'", "'string'", 
		"'double'", "'int'", "'def'", "'in'", "'if'", "'else'", "'null'", "'return'", 
		"'for'", "'while'", "'break'", "'continue'", null, null, null, null, null, 
		null, null, null, null, null, "'['", "']'", "'..'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'!'", "'&&'", "'||'", "'>'", "'>='", "'<'", 
		"'<='", "'!='", "'=='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "VAR", "NEW", "ERROR", "BOOL", "STRING", "DOUBLE", "INT_", "DEF", 
		"IN", "IF", "ELSE", "NULL", "RETURN", "FOR", "WHILE", "BREAK", "CONTINUE", 
		"BoolLit", "DoubleLit", "IntLit", "Level", "RepGuide", "StringLit", "Ident", 
		"WS", "COMMENT", "LINE_COMMENT", "LBRACK", "RBRACK", "DOTDOT", "ADDADD", 
		"SUBSUB", "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "AND", "OR", "GT", 
		"GE", "LT", "LE", "NE", "EQ"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DesignScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DesignScriptParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public CoreStmtContext[] coreStmt() {
			return GetRuleContexts<CoreStmtContext>();
		}
		public CoreStmtContext coreStmt(int i) {
			return GetRuleContext<CoreStmtContext>(i);
		}
		public FuncDefContext[] funcDef() {
			return GetRuleContexts<FuncDefContext>();
		}
		public FuncDefContext funcDef(int i) {
			return GetRuleContext<FuncDefContext>(i);
		}
		public ImperFuncDefContext[] imperFuncDef() {
			return GetRuleContexts<ImperFuncDefContext>();
		}
		public ImperFuncDefContext imperFuncDef(int i) {
			return GetRuleContext<ImperFuncDefContext>(i);
		}
		public EmptyStmtContext[] emptyStmt() {
			return GetRuleContexts<EmptyStmtContext>();
		}
		public EmptyStmtContext emptyStmt(int i) {
			return GetRuleContext<EmptyStmtContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << DEF) | (1L << NULL) | (1L << RETURN) | (1L << BoolLit) | (1L << DoubleLit) | (1L << IntLit) | (1L << StringLit) | (1L << Ident) | (1L << LBRACK) | (1L << ADD) | (1L << SUB) | (1L << NOT))) != 0)) {
				{
				State = 66;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 62; coreStmt();
					}
					break;

				case 2:
					{
					State = 63; funcDef();
					}
					break;

				case 3:
					{
					State = 64; imperFuncDef();
					}
					break;

				case 4:
					{
					State = 65; emptyStmt();
					}
					break;
				}
				}
				State = 70;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoreStmtContext : ParserRuleContext {
		public AssignStmtContext assignStmt() {
			return GetRuleContext<AssignStmtContext>(0);
		}
		public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public ImperBlockContext imperBlock() {
			return GetRuleContext<ImperBlockContext>(0);
		}
		public ImperBlockReturnStmtContext imperBlockReturnStmt() {
			return GetRuleContext<ImperBlockReturnStmtContext>(0);
		}
		public ImperBlockAssignStmtContext imperBlockAssignStmt() {
			return GetRuleContext<ImperBlockAssignStmtContext>(0);
		}
		public CoreStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coreStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterCoreStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitCoreStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoreStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoreStmtContext coreStmt() {
		CoreStmtContext _localctx = new CoreStmtContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_coreStmt);
		try {
			State = 79;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; assignStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; exprStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73; returnStmt();
				State = 74; Match(T__0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; imperBlock();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 77; imperBlockReturnStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 78; imperBlockAssignStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		public ITerminalNode DEF() { return GetToken(DesignScriptParser.DEF, 0); }
		public TypedIdentContext typedIdent() {
			return GetRuleContext<TypedIdentContext>(0);
		}
		public FuncDefArgListContext funcDefArgList() {
			return GetRuleContext<FuncDefArgListContext>(0);
		}
		public CoreStmtContext[] coreStmt() {
			return GetRuleContexts<CoreStmtContext>();
		}
		public CoreStmtContext coreStmt(int i) {
			return GetRuleContext<CoreStmtContext>(i);
		}
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterFuncDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitFuncDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_funcDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(DEF);
			State = 82; typedIdent();
			State = 83; Match(T__1);
			State = 85;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Ident) {
				{
				State = 84; funcDefArgList();
				}
			}

			State = 87; Match(T__2);
			State = 88; Match(T__3);
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << NULL) | (1L << RETURN) | (1L << BoolLit) | (1L << DoubleLit) | (1L << IntLit) | (1L << StringLit) | (1L << Ident) | (1L << LBRACK) | (1L << ADD) | (1L << SUB) | (1L << NOT))) != 0)) {
				{
				{
				State = 89; coreStmt();
				}
				}
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 95; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperFuncDefContext : ParserRuleContext {
		public ImperAnnotContext imperAnnot() {
			return GetRuleContext<ImperAnnotContext>(0);
		}
		public ITerminalNode DEF() { return GetToken(DesignScriptParser.DEF, 0); }
		public TypedIdentContext typedIdent() {
			return GetRuleContext<TypedIdentContext>(0);
		}
		public ImperBlockBodyContext imperBlockBody() {
			return GetRuleContext<ImperBlockBodyContext>(0);
		}
		public FuncDefArgListContext funcDefArgList() {
			return GetRuleContext<FuncDefArgListContext>(0);
		}
		public ImperFuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperFuncDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterImperFuncDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitImperFuncDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImperFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImperFuncDefContext imperFuncDef() {
		ImperFuncDefContext _localctx = new ImperFuncDefContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_imperFuncDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; imperAnnot();
			State = 98; Match(DEF);
			State = 99; typedIdent();
			State = 100; Match(T__1);
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Ident) {
				{
				State = 101; funcDefArgList();
				}
			}

			State = 104; Match(T__2);
			State = 105; Match(T__3);
			State = 106; imperBlockBody();
			State = 107; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStmtContext : ParserRuleContext {
		public EmptyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterEmptyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitEmptyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStmtContext emptyStmt() {
		EmptyStmtContext _localctx = new EmptyStmtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_emptyStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefArgListContext : ParserRuleContext {
		public FuncDefArgContext[] funcDefArg() {
			return GetRuleContexts<FuncDefArgContext>();
		}
		public FuncDefArgContext funcDefArg(int i) {
			return GetRuleContext<FuncDefArgContext>(i);
		}
		public FuncDefArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDefArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterFuncDefArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitFuncDefArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDefArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefArgListContext funcDefArgList() {
		FuncDefArgListContext _localctx = new FuncDefArgListContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_funcDefArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; funcDefArg();
			State = 116;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5) {
				{
				{
				State = 112; Match(T__5);
				State = 113; funcDefArg();
				}
				}
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefArgContext : ParserRuleContext {
		public TypedIdentContext typedIdent() {
			return GetRuleContext<TypedIdentContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncDefArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDefArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterFuncDefArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitFuncDefArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDefArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefArgContext funcDefArg() {
		FuncDefArgContext _localctx = new FuncDefArgContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_funcDefArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; typedIdent();
			State = 122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 120; Match(T__6);
				State = 121; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprContext : ExprContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LBRACK() { return GetToken(DesignScriptParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(DesignScriptParser.RBRACK, 0); }
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepGuideExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RepGuideListContext repGuideList() {
			return GetRuleContext<RepGuideListContext>(0);
		}
		public RepGuideExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterRepGuideExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitRepGuideExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepGuideExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtLevelExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtLevelContext atLevel() {
			return GetRuleContext<AtLevelContext>(0);
		}
		public RepGuideListContext repGuideList() {
			return GetRuleContext<RepGuideListContext>(0);
		}
		public AtLevelExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterAtLevelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitAtLevelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtLevelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExprContext : ExprContext {
		public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public FuncCallExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterFuncCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitFuncCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Ident() { return GetToken(DesignScriptParser.Ident, 0); }
		public FieldExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterFieldExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitFieldExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModExprContext : ExprContext {
		public IToken Op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivModExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterMulDivModExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitMulDivModExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivModExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExprContext : ExprContext {
		public IToken Op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterAddSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitAddSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExprContext : ExprContext {
		public IToken Op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterCompExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitCompExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExprContext : ExprContext {
		public IToken Op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterEqExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitEqExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TriRangeExprContext : ExprContext {
		public IToken countstep;
		public IToken count;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] DOTDOT() { return GetTokens(DesignScriptParser.DOTDOT); }
		public ITerminalNode DOTDOT(int i) {
			return GetToken(DesignScriptParser.DOTDOT, i);
		}
		public TriRangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterTriRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitTriRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnitRangeExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DOTDOT() { return GetToken(DesignScriptParser.DOTDOT, 0); }
		public UnitRangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterUnitRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitUnitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineConditionExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public InlineConditionExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterInlineConditionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitInlineConditionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineConditionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				_localctx = new PrimaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 125; primary();
				}
				break;

			case 2:
				{
				_localctx = new FuncCallExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 126; qualifiedIdent();
				State = 127; Match(T__1);
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << NULL) | (1L << BoolLit) | (1L << DoubleLit) | (1L << IntLit) | (1L << StringLit) | (1L << Ident) | (1L << LBRACK) | (1L << ADD) | (1L << SUB) | (1L << NOT))) != 0)) {
					{
					State = 128; exprList();
					}
				}

				State = 131; Match(T__2);
				}
				break;

			case 3:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 133;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << NOT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 134; expr(10);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 193;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 191;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivModExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 137;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 138;
						((MulDivModExprContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MulDivModExprContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 139; expr(10);
						}
						break;

					case 2:
						{
						_localctx = new AddSubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 140;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 141;
						((AddSubExprContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubExprContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 142; expr(9);
						}
						break;

					case 3:
						{
						_localctx = new CompExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 143;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 144;
						((CompExprContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
							((CompExprContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 145; expr(8);
						}
						break;

					case 4:
						{
						_localctx = new EqExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 146;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 147;
						((EqExprContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==NE || _la==EQ) ) {
							((EqExprContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 148; expr(7);
						}
						break;

					case 5:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 149;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 150; Match(AND);
						State = 151; expr(6);
						}
						break;

					case 6:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 152;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 153; Match(OR);
						State = 154; expr(5);
						}
						break;

					case 7:
						{
						_localctx = new TriRangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 155;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 156; Match(DOTDOT);
						State = 158;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==T__8) {
							{
							State = 157; ((TriRangeExprContext)_localctx).countstep = Match(T__8);
							}
						}

						State = 160; expr(0);
						State = 161; Match(DOTDOT);
						State = 163;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==T__8) {
							{
							State = 162; ((TriRangeExprContext)_localctx).count = Match(T__8);
							}
						}

						State = 165; expr(4);
						}
						break;

					case 8:
						{
						_localctx = new UnitRangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 167;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 168; Match(DOTDOT);
						State = 169; expr(3);
						}
						break;

					case 9:
						{
						_localctx = new InlineConditionExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 170;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 171; Match(T__9);
						State = 172; expr(0);
						State = 173; Match(T__10);
						State = 174; expr(2);
						}
						break;

					case 10:
						{
						_localctx = new IndexExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 176;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 177; Match(LBRACK);
						State = 178; expr(0);
						State = 179; Match(RBRACK);
						}
						break;

					case 11:
						{
						_localctx = new RepGuideExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 181;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 182; repGuideList();
						}
						break;

					case 12:
						{
						_localctx = new AtLevelExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 183;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 184; atLevel();
						State = 186;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
						case 1:
							{
							State = 185; repGuideList();
							}
							break;
						}
						}
						break;

					case 13:
						{
						_localctx = new FieldExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 188;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 189; Match(T__7);
						State = 190; Match(Ident);
						}
						break;
					}
					} 
				}
				State = 195;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenExprContext : PrimaryContext {
		public ParExprContext parExpr() {
			return GetRuleContext<ParExprContext>(0);
		}
		public ParenExprContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitExprContext : PrimaryContext {
		public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		public LitExprContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentContext : PrimaryContext {
		public ITerminalNode Ident() { return GetToken(DesignScriptParser.Ident, 0); }
		public IdentContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_primary);
		try {
			State = 199;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__1:
				_localctx = new ParenExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; parExpr();
				}
				break;
			case T__3:
			case NULL:
			case BoolLit:
			case DoubleLit:
			case IntLit:
			case StringLit:
			case LBRACK:
				_localctx = new LitExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 197; lit();
				}
				break;
			case Ident:
				_localctx = new IdentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 198; Match(Ident);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterParExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitParExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExprContext parExpr() {
		ParExprContext _localctx = new ParExprContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_parExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(T__1);
			State = 202; expr(0);
			State = 203; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LitContext : ParserRuleContext {
		public LitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lit; } }
	 
		public LitContext() { }
		public virtual void CopyFrom(LitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoubleLitContext : LitContext {
		public ITerminalNode DoubleLit() { return GetToken(DesignScriptParser.DoubleLit, 0); }
		public DoubleLitContext(LitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterDoubleLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitDoubleLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitContext : LitContext {
		public ITerminalNode IntLit() { return GetToken(DesignScriptParser.IntLit, 0); }
		public IntLitContext(LitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterIntLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitIntLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLitContext : LitContext {
		public ITerminalNode StringLit() { return GetToken(DesignScriptParser.StringLit, 0); }
		public StringLitContext(LitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterStringLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitStringLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLitContext : LitContext {
		public ITerminalNode BoolLit() { return GetToken(DesignScriptParser.BoolLit, 0); }
		public BoolLitContext(LitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterBoolLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitBoolLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLitContext : LitContext {
		public ITerminalNode NULL() { return GetToken(DesignScriptParser.NULL, 0); }
		public NullLitContext(LitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterNullLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitNullLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListLitContext : LitContext {
		public ITerminalNode LBRACK() { return GetToken(DesignScriptParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(DesignScriptParser.RBRACK, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ListLitContext(LitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterListLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitListLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DictLitContext : LitContext {
		public KeyValuesContext keyValues() {
			return GetRuleContext<KeyValuesContext>(0);
		}
		public DictLitContext(LitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterDictLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitDictLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LitContext lit() {
		LitContext _localctx = new LitContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_lit);
		int _la;
		try {
			State = 220;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DoubleLit:
				_localctx = new DoubleLitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(DoubleLit);
				}
				break;
			case IntLit:
				_localctx = new IntLitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; Match(IntLit);
				}
				break;
			case StringLit:
				_localctx = new StringLitContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 207; Match(StringLit);
				}
				break;
			case BoolLit:
				_localctx = new BoolLitContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 208; Match(BoolLit);
				}
				break;
			case NULL:
				_localctx = new NullLitContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 209; Match(NULL);
				}
				break;
			case LBRACK:
				_localctx = new ListLitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 210; Match(LBRACK);
				State = 212;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << NULL) | (1L << BoolLit) | (1L << DoubleLit) | (1L << IntLit) | (1L << StringLit) | (1L << Ident) | (1L << LBRACK) | (1L << ADD) | (1L << SUB) | (1L << NOT))) != 0)) {
					{
					State = 211; exprList();
					}
				}

				State = 214; Match(RBRACK);
				}
				break;
			case T__3:
				_localctx = new DictLitContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 215; Match(T__3);
				State = 217;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==StringLit) {
					{
					State = 216; keyValues();
					}
				}

				State = 219; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; expr(0);
			State = 227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5) {
				{
				{
				State = 223; Match(T__5);
				State = 224; expr(0);
				}
				}
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtLevelContext : ParserRuleContext {
		public ITerminalNode Level() { return GetToken(DesignScriptParser.Level, 0); }
		public AtLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterAtLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitAtLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtLevelContext atLevel() {
		AtLevelContext _localctx = new AtLevelContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_atLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(Level);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepGuideListContext : ParserRuleContext {
		public ITerminalNode[] RepGuide() { return GetTokens(DesignScriptParser.RepGuide); }
		public ITerminalNode RepGuide(int i) {
			return GetToken(DesignScriptParser.RepGuide, i);
		}
		public RepGuideListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repGuideList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterRepGuideList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitRepGuideList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepGuideList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepGuideListContext repGuideList() {
		RepGuideListContext _localctx = new RepGuideListContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_repGuideList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 232; Match(RepGuide);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 235;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; expr(0);
			State = 238; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(DesignScriptParser.RETURN, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(RETURN);
			State = 245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__6) | (1L << NULL) | (1L << BoolLit) | (1L << DoubleLit) | (1L << IntLit) | (1L << StringLit) | (1L << Ident) | (1L << LBRACK) | (1L << ADD) | (1L << SUB) | (1L << NOT))) != 0)) {
				{
				State = 242;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__6) {
					{
					State = 241; Match(T__6);
					}
				}

				State = 244; exprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperAnnotContext : ParserRuleContext {
		public ITerminalNode LBRACK() { return GetToken(DesignScriptParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(DesignScriptParser.RBRACK, 0); }
		public ImperAnnotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperAnnot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterImperAnnot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitImperAnnot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImperAnnot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImperAnnotContext imperAnnot() {
		ImperAnnotContext _localctx = new ImperAnnotContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_imperAnnot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(LBRACK);
			State = 248; Match(T__11);
			State = 249; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperBlockContext : ParserRuleContext {
		public ImperAnnotContext imperAnnot() {
			return GetRuleContext<ImperAnnotContext>(0);
		}
		public ImperBlockBodyContext imperBlockBody() {
			return GetRuleContext<ImperBlockBodyContext>(0);
		}
		public ImperBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterImperBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitImperBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImperBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImperBlockContext imperBlock() {
		ImperBlockContext _localctx = new ImperBlockContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_imperBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; imperAnnot();
			State = 252; Match(T__3);
			State = 253; imperBlockBody();
			State = 254; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperBlockReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(DesignScriptParser.RETURN, 0); }
		public ImperBlockContext imperBlock() {
			return GetRuleContext<ImperBlockContext>(0);
		}
		public ImperBlockReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperBlockReturnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterImperBlockReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitImperBlockReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImperBlockReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImperBlockReturnStmtContext imperBlockReturnStmt() {
		ImperBlockReturnStmtContext _localctx = new ImperBlockReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_imperBlockReturnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(RETURN);
			State = 258;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 257; Match(T__6);
				}
			}

			State = 260; imperBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperBlockAssignStmtContext : ParserRuleContext {
		public TypedIdentListContext typedIdentList() {
			return GetRuleContext<TypedIdentListContext>(0);
		}
		public ImperBlockContext imperBlock() {
			return GetRuleContext<ImperBlockContext>(0);
		}
		public ImperBlockAssignStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperBlockAssignStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterImperBlockAssignStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitImperBlockAssignStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImperBlockAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImperBlockAssignStmtContext imperBlockAssignStmt() {
		ImperBlockAssignStmtContext _localctx = new ImperBlockAssignStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_imperBlockAssignStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; typedIdentList();
			State = 263; Match(T__6);
			State = 264; imperBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperBlockBodyContext : ParserRuleContext {
		public ImperStmtContext[] imperStmt() {
			return GetRuleContexts<ImperStmtContext>();
		}
		public ImperStmtContext imperStmt(int i) {
			return GetRuleContext<ImperStmtContext>(i);
		}
		public ImperBlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperBlockBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterImperBlockBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitImperBlockBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImperBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImperBlockBodyContext imperBlockBody() {
		ImperBlockBodyContext _localctx = new ImperBlockBodyContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_imperBlockBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << IF) | (1L << NULL) | (1L << RETURN) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << BoolLit) | (1L << DoubleLit) | (1L << IntLit) | (1L << StringLit) | (1L << Ident) | (1L << LBRACK) | (1L << ADD) | (1L << SUB) | (1L << NOT))) != 0)) {
				{
				{
				State = 266; imperStmt();
				}
				}
				State = 271;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperStmtContext : ParserRuleContext {
		public ImperStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperStmt; } }
	 
		public ImperStmtContext() { }
		public virtual void CopyFrom(ImperStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImperCoreStmtContext : ImperStmtContext {
		public CoreStmtContext coreStmt() {
			return GetRuleContext<CoreStmtContext>(0);
		}
		public ImperCoreStmtContext(ImperStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterImperCoreStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitImperCoreStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImperCoreStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : ImperStmtContext {
		public ITerminalNode IF() { return GetToken(DesignScriptParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ImperStmtContext[] imperStmt() {
			return GetRuleContexts<ImperStmtContext>();
		}
		public ImperStmtContext imperStmt(int i) {
			return GetRuleContext<ImperStmtContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(DesignScriptParser.ELSE, 0); }
		public IfStmtContext(ImperStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : ImperStmtContext {
		public ITerminalNode FOR() { return GetToken(DesignScriptParser.FOR, 0); }
		public ITerminalNode Ident() { return GetToken(DesignScriptParser.Ident, 0); }
		public ITerminalNode IN() { return GetToken(DesignScriptParser.IN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ImperStmtContext imperStmt() {
			return GetRuleContext<ImperStmtContext>(0);
		}
		public ForStmtContext(ImperStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : ImperStmtContext {
		public ITerminalNode WHILE() { return GetToken(DesignScriptParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ImperStmtContext imperStmt() {
			return GetRuleContext<ImperStmtContext>(0);
		}
		public WhileStmtContext(ImperStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : ImperStmtContext {
		public ITerminalNode BREAK() { return GetToken(DesignScriptParser.BREAK, 0); }
		public BreakStmtContext(ImperStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStmtContext : ImperStmtContext {
		public ITerminalNode CONTINUE() { return GetToken(DesignScriptParser.CONTINUE, 0); }
		public ContinueStmtContext(ImperStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : ImperStmtContext {
		public ImperBlockBodyContext imperBlockBody() {
			return GetRuleContext<ImperBlockBodyContext>(0);
		}
		public BlockStmtContext(ImperStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImperStmtContext imperStmt() {
		ImperStmtContext _localctx = new ImperStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_imperStmt);
		try {
			State = 304;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				_localctx = new ImperCoreStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; coreStmt();
				}
				break;

			case 2:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; Match(IF);
				State = 274; Match(T__1);
				State = 275; expr(0);
				State = 276; Match(T__2);
				State = 277; imperStmt();
				State = 280;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					State = 278; Match(ELSE);
					State = 279; imperStmt();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 282; Match(FOR);
				State = 283; Match(T__1);
				State = 284; Match(Ident);
				State = 285; Match(IN);
				State = 286; expr(0);
				State = 287; Match(T__2);
				State = 288; imperStmt();
				}
				break;

			case 4:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 290; Match(WHILE);
				State = 291; Match(T__1);
				State = 292; expr(0);
				State = 293; Match(T__2);
				State = 294; imperStmt();
				}
				break;

			case 5:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 296; Match(BREAK);
				State = 297; Match(T__0);
				}
				break;

			case 6:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 298; Match(CONTINUE);
				State = 299; Match(T__0);
				}
				break;

			case 7:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 300; Match(T__3);
				State = 301; imperBlockBody();
				State = 302; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStmtContext : ParserRuleContext {
		public TypedIdentListContext typedIdentList() {
			return GetRuleContext<TypedIdentListContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterAssignStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitAssignStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStmtContext assignStmt() {
		AssignStmtContext _localctx = new AssignStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_assignStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; typedIdentList();
			State = 307; Match(T__6);
			State = 308; expr(0);
			State = 309; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(DesignScriptParser.Ident, 0); }
		public TypeNameWithRankContext typeNameWithRank() {
			return GetRuleContext<TypeNameWithRankContext>(0);
		}
		public TypedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterTypedIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitTypedIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentContext typedIdent() {
		TypedIdentContext _localctx = new TypedIdentContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_typedIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(Ident);
			State = 314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 312; Match(T__10);
				State = 313; typeNameWithRank();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueContext : ParserRuleContext {
		public ITerminalNode StringLit() { return GetToken(DesignScriptParser.StringLit, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public KeyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterKeyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitKeyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueContext keyValue() {
		KeyValueContext _localctx = new KeyValueContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_keyValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(StringLit);
			State = 317; Match(T__10);
			State = 318; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuesContext : ParserRuleContext {
		public KeyValueContext[] keyValue() {
			return GetRuleContexts<KeyValueContext>();
		}
		public KeyValueContext keyValue(int i) {
			return GetRuleContext<KeyValueContext>(i);
		}
		public KeyValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterKeyValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitKeyValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuesContext keyValues() {
		KeyValuesContext _localctx = new KeyValuesContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_keyValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; keyValue();
			State = 325;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5) {
				{
				{
				State = 321; Match(T__5);
				State = 322; keyValue();
				}
				}
				State = 327;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentListContext : ParserRuleContext {
		public TypedIdentContext[] typedIdent() {
			return GetRuleContexts<TypedIdentContext>();
		}
		public TypedIdentContext typedIdent(int i) {
			return GetRuleContext<TypedIdentContext>(i);
		}
		public TypedIdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterTypedIdentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitTypedIdentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentListContext typedIdentList() {
		TypedIdentListContext _localctx = new TypedIdentListContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_typedIdentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; typedIdent();
			State = 333;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5) {
				{
				{
				State = 329; Match(T__5);
				State = 330; typedIdent();
				}
				}
				State = 335;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListContext : ParserRuleContext {
		public QualifiedIdentContext[] qualifiedIdent() {
			return GetRuleContexts<QualifiedIdentContext>();
		}
		public QualifiedIdentContext qualifiedIdent(int i) {
			return GetRuleContext<QualifiedIdentContext>(i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterIdentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitIdentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentListContext identList() {
		IdentListContext _localctx = new IdentListContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_identList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; qualifiedIdent();
			State = 341;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5) {
				{
				{
				State = 337; Match(T__5);
				State = 338; qualifiedIdent();
				}
				}
				State = 343;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		public ITerminalNode[] Ident() { return GetTokens(DesignScriptParser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(DesignScriptParser.Ident, i);
		}
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_qualifiedIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(Ident);
			State = 349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 345; Match(T__7);
				State = 346; Match(Ident);
				}
				}
				State = 351;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameWithRankContext : ParserRuleContext {
		public TypeNameWithRankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameWithRank; } }
	 
		public TypeNameWithRankContext() { }
		public virtual void CopyFrom(TypeNameWithRankContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeNameArbitraryRankContext : TypeNameWithRankContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(DesignScriptParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(DesignScriptParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(DesignScriptParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(DesignScriptParser.RBRACK, i);
		}
		public ITerminalNode DOTDOT() { return GetToken(DesignScriptParser.DOTDOT, 0); }
		public TypeNameArbitraryRankContext(TypeNameWithRankContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterTypeNameArbitraryRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitTypeNameArbitraryRank(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameArbitraryRank(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeNameRankOneOrMoreContext : TypeNameWithRankContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode LBRACK() { return GetToken(DesignScriptParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(DesignScriptParser.RBRACK, 0); }
		public ITerminalNode DOTDOT() { return GetToken(DesignScriptParser.DOTDOT, 0); }
		public TypeNameRankOneOrMoreContext(TypeNameWithRankContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterTypeNameRankOneOrMore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitTypeNameRankOneOrMore(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameRankOneOrMore(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeNameRankContext : TypeNameWithRankContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(DesignScriptParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(DesignScriptParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(DesignScriptParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(DesignScriptParser.RBRACK, i);
		}
		public TypeNameRankContext(TypeNameWithRankContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterTypeNameRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitTypeNameRank(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameRank(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameWithRankContext typeNameWithRank() {
		TypeNameWithRankContext _localctx = new TypeNameWithRankContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_typeNameWithRank);
		int _la;
		try {
			State = 372;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				_localctx = new TypeNameArbitraryRankContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; typeName();
				State = 353; Match(LBRACK);
				State = 354; Match(RBRACK);
				State = 355; Match(DOTDOT);
				State = 356; Match(LBRACK);
				State = 357; Match(RBRACK);
				}
				break;

			case 2:
				_localctx = new TypeNameRankOneOrMoreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 359; typeName();
				State = 360; Match(LBRACK);
				State = 361; Match(RBRACK);
				State = 362; Match(DOTDOT);
				}
				break;

			case 3:
				_localctx = new TypeNameRankContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 364; typeName();
				State = 369;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 365; Match(LBRACK);
					State = 366; Match(RBRACK);
					}
					}
					State = 371;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		public ITerminalNode ERROR() { return GetToken(DesignScriptParser.ERROR, 0); }
		public ITerminalNode BOOL() { return GetToken(DesignScriptParser.BOOL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(DesignScriptParser.DOUBLE, 0); }
		public ITerminalNode INT_() { return GetToken(DesignScriptParser.INT_, 0); }
		public ITerminalNode STRING() { return GetToken(DesignScriptParser.STRING, 0); }
		public ITerminalNode VAR() { return GetToken(DesignScriptParser.VAR, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDesignScriptListener typedListener = listener as IDesignScriptListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDesignScriptVisitor<TResult> typedVisitor = visitor as IDesignScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_typeName);
		try {
			State = 381;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Ident:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374; qualifiedIdent();
				}
				break;
			case ERROR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375; Match(ERROR);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 376; Match(BOOL);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 377; Match(DOUBLE);
				}
				break;
			case INT_:
				EnterOuterAlt(_localctx, 5);
				{
				State = 378; Match(INT_);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 379; Match(STRING);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 380; Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 9);

		case 1: return Precpred(_ctx, 8);

		case 2: return Precpred(_ctx, 7);

		case 3: return Precpred(_ctx, 6);

		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);

		case 6: return Precpred(_ctx, 3);

		case 7: return Precpred(_ctx, 2);

		case 8: return Precpred(_ctx, 1);

		case 9: return Precpred(_ctx, 15);

		case 10: return Precpred(_ctx, 14);

		case 11: return Precpred(_ctx, 13);

		case 12: return Precpred(_ctx, 11);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3<\x182\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\x3\x2\x3\x2\x3\x2\a\x2\x45\n\x2\f\x2\xE\x2H\v\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3R\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"X\n\x4\x3\x4\x3\x4\x3\x4\a\x4]\n\x4\f\x4\xE\x4`\v\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5i\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\a\au\n\a\f\a\xE\ax\v\a\x3\b\x3\b\x3\b\x5\b}\n"+
		"\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x84\n\t\x3\t\x3\t\x3\t\x3\t\x5\t\x8A"+
		"\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xA1\n\t\x3\t\x3\t\x3\t\x5"+
		"\t\xA6\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xBD\n\t\x3\t\x3\t\x3"+
		"\t\a\t\xC2\n\t\f\t\xE\t\xC5\v\t\x3\n\x3\n\x3\n\x5\n\xCA\n\n\x3\v\x3\v"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xD7\n\f\x3\f\x3\f\x3"+
		"\f\x5\f\xDC\n\f\x3\f\x5\f\xDF\n\f\x3\r\x3\r\x3\r\a\r\xE4\n\r\f\r\xE\r"+
		"\xE7\v\r\x3\xE\x3\xE\x3\xF\x6\xF\xEC\n\xF\r\xF\xE\xF\xED\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x5\x11\xF5\n\x11\x3\x11\x5\x11\xF8\n\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x5\x14\x105\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\a"+
		"\x16\x10E\n\x16\f\x16\xE\x16\x111\v\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x5\x17\x11B\n\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x133\n"+
		"\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x5\x19\x13D"+
		"\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\a\x1B\x146\n\x1B"+
		"\f\x1B\xE\x1B\x149\v\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x14E\n\x1C\f\x1C\xE"+
		"\x1C\x151\v\x1C\x3\x1D\x3\x1D\x3\x1D\a\x1D\x156\n\x1D\f\x1D\xE\x1D\x159"+
		"\v\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E\x15E\n\x1E\f\x1E\xE\x1E\x161\v\x1E\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x172\n\x1F\f\x1F\xE\x1F\x175\v"+
		"\x1F\x5\x1F\x177\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x180\n \x3 \x2"+
		"\x2\x3\x10!\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2\x2\a\x4\x2/\x30\x34\x34\x3"+
		"\x2\x31\x33\x3\x2/\x30\x3\x2\x37:\x3\x2;<\x1A8\x2\x46\x3\x2\x2\x2\x4Q"+
		"\x3\x2\x2\x2\x6S\x3\x2\x2\x2\b\x63\x3\x2\x2\x2\no\x3\x2\x2\x2\fq\x3\x2"+
		"\x2\x2\xEy\x3\x2\x2\x2\x10\x89\x3\x2\x2\x2\x12\xC9\x3\x2\x2\x2\x14\xCB"+
		"\x3\x2\x2\x2\x16\xDE\x3\x2\x2\x2\x18\xE0\x3\x2\x2\x2\x1A\xE8\x3\x2\x2"+
		"\x2\x1C\xEB\x3\x2\x2\x2\x1E\xEF\x3\x2\x2\x2 \xF2\x3\x2\x2\x2\"\xF9\x3"+
		"\x2\x2\x2$\xFD\x3\x2\x2\x2&\x102\x3\x2\x2\x2(\x108\x3\x2\x2\x2*\x10F\x3"+
		"\x2\x2\x2,\x132\x3\x2\x2\x2.\x134\x3\x2\x2\x2\x30\x139\x3\x2\x2\x2\x32"+
		"\x13E\x3\x2\x2\x2\x34\x142\x3\x2\x2\x2\x36\x14A\x3\x2\x2\x2\x38\x152\x3"+
		"\x2\x2\x2:\x15A\x3\x2\x2\x2<\x176\x3\x2\x2\x2>\x17F\x3\x2\x2\x2@\x45\x5"+
		"\x4\x3\x2\x41\x45\x5\x6\x4\x2\x42\x45\x5\b\x5\x2\x43\x45\x5\n\x6\x2\x44"+
		"@\x3\x2\x2\x2\x44\x41\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x43\x3\x2\x2"+
		"\x2\x45H\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\x3\x3\x2\x2"+
		"\x2H\x46\x3\x2\x2\x2IR\x5.\x18\x2JR\x5\x1E\x10\x2KL\x5 \x11\x2LM\a\x3"+
		"\x2\x2MR\x3\x2\x2\x2NR\x5$\x13\x2OR\x5&\x14\x2PR\x5(\x15\x2QI\x3\x2\x2"+
		"\x2QJ\x3\x2\x2\x2QK\x3\x2\x2\x2QN\x3\x2\x2\x2QO\x3\x2\x2\x2QP\x3\x2\x2"+
		"\x2R\x5\x3\x2\x2\x2ST\a\x16\x2\x2TU\x5\x30\x19\x2UW\a\x4\x2\x2VX\x5\f"+
		"\a\x2WV\x3\x2\x2\x2WX\x3\x2\x2\x2XY\x3\x2\x2\x2YZ\a\x5\x2\x2Z^\a\x6\x2"+
		"\x2[]\x5\x4\x3\x2\\[\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3\x2"+
		"\x2\x2_\x61\x3\x2\x2\x2`^\x3\x2\x2\x2\x61\x62\a\a\x2\x2\x62\a\x3\x2\x2"+
		"\x2\x63\x64\x5\"\x12\x2\x64\x65\a\x16\x2\x2\x65\x66\x5\x30\x19\x2\x66"+
		"h\a\x4\x2\x2gi\x5\f\a\x2hg\x3\x2\x2\x2hi\x3\x2\x2\x2ij\x3\x2\x2\x2jk\a"+
		"\x5\x2\x2kl\a\x6\x2\x2lm\x5*\x16\x2mn\a\a\x2\x2n\t\x3\x2\x2\x2op\a\x3"+
		"\x2\x2p\v\x3\x2\x2\x2qv\x5\xE\b\x2rs\a\b\x2\x2su\x5\xE\b\x2tr\x3\x2\x2"+
		"\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2w\r\x3\x2\x2\x2xv\x3\x2\x2"+
		"\x2y|\x5\x30\x19\x2z{\a\t\x2\x2{}\x5\x10\t\x2|z\x3\x2\x2\x2|}\x3\x2\x2"+
		"\x2}\xF\x3\x2\x2\x2~\x7F\b\t\x1\x2\x7F\x8A\x5\x12\n\x2\x80\x81\x5:\x1E"+
		"\x2\x81\x83\a\x4\x2\x2\x82\x84\x5\x18\r\x2\x83\x82\x3\x2\x2\x2\x83\x84"+
		"\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\a\x5\x2\x2\x86\x8A\x3\x2\x2\x2"+
		"\x87\x88\t\x2\x2\x2\x88\x8A\x5\x10\t\f\x89~\x3\x2\x2\x2\x89\x80\x3\x2"+
		"\x2\x2\x89\x87\x3\x2\x2\x2\x8A\xC3\x3\x2\x2\x2\x8B\x8C\f\v\x2\x2\x8C\x8D"+
		"\t\x3\x2\x2\x8D\xC2\x5\x10\t\f\x8E\x8F\f\n\x2\x2\x8F\x90\t\x4\x2\x2\x90"+
		"\xC2\x5\x10\t\v\x91\x92\f\t\x2\x2\x92\x93\t\x5\x2\x2\x93\xC2\x5\x10\t"+
		"\n\x94\x95\f\b\x2\x2\x95\x96\t\x6\x2\x2\x96\xC2\x5\x10\t\t\x97\x98\f\a"+
		"\x2\x2\x98\x99\a\x35\x2\x2\x99\xC2\x5\x10\t\b\x9A\x9B\f\x6\x2\x2\x9B\x9C"+
		"\a\x36\x2\x2\x9C\xC2\x5\x10\t\a\x9D\x9E\f\x5\x2\x2\x9E\xA0\a,\x2\x2\x9F"+
		"\xA1\a\v\x2\x2\xA0\x9F\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA2\x3\x2\x2"+
		"\x2\xA2\xA3\x5\x10\t\x2\xA3\xA5\a,\x2\x2\xA4\xA6\a\v\x2\x2\xA5\xA4\x3"+
		"\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x5\x10\t\x6"+
		"\xA8\xC2\x3\x2\x2\x2\xA9\xAA\f\x4\x2\x2\xAA\xAB\a,\x2\x2\xAB\xC2\x5\x10"+
		"\t\x5\xAC\xAD\f\x3\x2\x2\xAD\xAE\a\f\x2\x2\xAE\xAF\x5\x10\t\x2\xAF\xB0"+
		"\a\r\x2\x2\xB0\xB1\x5\x10\t\x4\xB1\xC2\x3\x2\x2\x2\xB2\xB3\f\x11\x2\x2"+
		"\xB3\xB4\a*\x2\x2\xB4\xB5\x5\x10\t\x2\xB5\xB6\a+\x2\x2\xB6\xC2\x3\x2\x2"+
		"\x2\xB7\xB8\f\x10\x2\x2\xB8\xC2\x5\x1C\xF\x2\xB9\xBA\f\xF\x2\x2\xBA\xBC"+
		"\x5\x1A\xE\x2\xBB\xBD\x5\x1C\xF\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2"+
		"\x2\xBD\xC2\x3\x2\x2\x2\xBE\xBF\f\r\x2\x2\xBF\xC0\a\n\x2\x2\xC0\xC2\a"+
		"&\x2\x2\xC1\x8B\x3\x2\x2\x2\xC1\x8E\x3\x2\x2\x2\xC1\x91\x3\x2\x2\x2\xC1"+
		"\x94\x3\x2\x2\x2\xC1\x97\x3\x2\x2\x2\xC1\x9A\x3\x2\x2\x2\xC1\x9D\x3\x2"+
		"\x2\x2\xC1\xA9\x3\x2\x2\x2\xC1\xAC\x3\x2\x2\x2\xC1\xB2\x3\x2\x2\x2\xC1"+
		"\xB7\x3\x2\x2\x2\xC1\xB9\x3\x2\x2\x2\xC1\xBE\x3\x2\x2\x2\xC2\xC5\x3\x2"+
		"\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\x11\x3\x2\x2\x2\xC5"+
		"\xC3\x3\x2\x2\x2\xC6\xCA\x5\x14\v\x2\xC7\xCA\x5\x16\f\x2\xC8\xCA\a&\x2"+
		"\x2\xC9\xC6\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA\x13"+
		"\x3\x2\x2\x2\xCB\xCC\a\x4\x2\x2\xCC\xCD\x5\x10\t\x2\xCD\xCE\a\x5\x2\x2"+
		"\xCE\x15\x3\x2\x2\x2\xCF\xDF\a!\x2\x2\xD0\xDF\a\"\x2\x2\xD1\xDF\a%\x2"+
		"\x2\xD2\xDF\a \x2\x2\xD3\xDF\a\x1A\x2\x2\xD4\xD6\a*\x2\x2\xD5\xD7\x5\x18"+
		"\r\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8"+
		"\xDF\a+\x2\x2\xD9\xDB\a\x6\x2\x2\xDA\xDC\x5\x34\x1B\x2\xDB\xDA\x3\x2\x2"+
		"\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDF\a\a\x2\x2\xDE\xCF"+
		"\x3\x2\x2\x2\xDE\xD0\x3\x2\x2\x2\xDE\xD1\x3\x2\x2\x2\xDE\xD2\x3\x2\x2"+
		"\x2\xDE\xD3\x3\x2\x2\x2\xDE\xD4\x3\x2\x2\x2\xDE\xD9\x3\x2\x2\x2\xDF\x17"+
		"\x3\x2\x2\x2\xE0\xE5\x5\x10\t\x2\xE1\xE2\a\b\x2\x2\xE2\xE4\x5\x10\t\x2"+
		"\xE3\xE1\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3"+
		"\x2\x2\x2\xE6\x19\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xE9\a#\x2\x2\xE9"+
		"\x1B\x3\x2\x2\x2\xEA\xEC\a$\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2"+
		"\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\x1D\x3\x2\x2\x2\xEF\xF0"+
		"\x5\x10\t\x2\xF0\xF1\a\x3\x2\x2\xF1\x1F\x3\x2\x2\x2\xF2\xF7\a\x1B\x2\x2"+
		"\xF3\xF5\a\t\x2\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6\x3"+
		"\x2\x2\x2\xF6\xF8\x5\x18\r\x2\xF7\xF4\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2"+
		"\xF8!\x3\x2\x2\x2\xF9\xFA\a*\x2\x2\xFA\xFB\a\xE\x2\x2\xFB\xFC\a+\x2\x2"+
		"\xFC#\x3\x2\x2\x2\xFD\xFE\x5\"\x12\x2\xFE\xFF\a\x6\x2\x2\xFF\x100\x5*"+
		"\x16\x2\x100\x101\a\a\x2\x2\x101%\x3\x2\x2\x2\x102\x104\a\x1B\x2\x2\x103"+
		"\x105\a\t\x2\x2\x104\x103\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x106"+
		"\x3\x2\x2\x2\x106\x107\x5$\x13\x2\x107\'\x3\x2\x2\x2\x108\x109\x5\x36"+
		"\x1C\x2\x109\x10A\a\t\x2\x2\x10A\x10B\x5$\x13\x2\x10B)\x3\x2\x2\x2\x10C"+
		"\x10E\x5,\x17\x2\x10D\x10C\x3\x2\x2\x2\x10E\x111\x3\x2\x2\x2\x10F\x10D"+
		"\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110+\x3\x2\x2\x2\x111\x10F\x3\x2\x2"+
		"\x2\x112\x133\x5\x4\x3\x2\x113\x114\a\x18\x2\x2\x114\x115\a\x4\x2\x2\x115"+
		"\x116\x5\x10\t\x2\x116\x117\a\x5\x2\x2\x117\x11A\x5,\x17\x2\x118\x119"+
		"\a\x19\x2\x2\x119\x11B\x5,\x17\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2"+
		"\x2\x2\x11B\x133\x3\x2\x2\x2\x11C\x11D\a\x1C\x2\x2\x11D\x11E\a\x4\x2\x2"+
		"\x11E\x11F\a&\x2\x2\x11F\x120\a\x17\x2\x2\x120\x121\x5\x10\t\x2\x121\x122"+
		"\a\x5\x2\x2\x122\x123\x5,\x17\x2\x123\x133\x3\x2\x2\x2\x124\x125\a\x1D"+
		"\x2\x2\x125\x126\a\x4\x2\x2\x126\x127\x5\x10\t\x2\x127\x128\a\x5\x2\x2"+
		"\x128\x129\x5,\x17\x2\x129\x133\x3\x2\x2\x2\x12A\x12B\a\x1E\x2\x2\x12B"+
		"\x133\a\x3\x2\x2\x12C\x12D\a\x1F\x2\x2\x12D\x133\a\x3\x2\x2\x12E\x12F"+
		"\a\x6\x2\x2\x12F\x130\x5*\x16\x2\x130\x131\a\a\x2\x2\x131\x133\x3\x2\x2"+
		"\x2\x132\x112\x3\x2\x2\x2\x132\x113\x3\x2\x2\x2\x132\x11C\x3\x2\x2\x2"+
		"\x132\x124\x3\x2\x2\x2\x132\x12A\x3\x2\x2\x2\x132\x12C\x3\x2\x2\x2\x132"+
		"\x12E\x3\x2\x2\x2\x133-\x3\x2\x2\x2\x134\x135\x5\x36\x1C\x2\x135\x136"+
		"\a\t\x2\x2\x136\x137\x5\x10\t\x2\x137\x138\a\x3\x2\x2\x138/\x3\x2\x2\x2"+
		"\x139\x13C\a&\x2\x2\x13A\x13B\a\r\x2\x2\x13B\x13D\x5<\x1F\x2\x13C\x13A"+
		"\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x31\x3\x2\x2\x2\x13E\x13F\a%\x2"+
		"\x2\x13F\x140\a\r\x2\x2\x140\x141\x5\x10\t\x2\x141\x33\x3\x2\x2\x2\x142"+
		"\x147\x5\x32\x1A\x2\x143\x144\a\b\x2\x2\x144\x146\x5\x32\x1A\x2\x145\x143"+
		"\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147\x148\x3"+
		"\x2\x2\x2\x148\x35\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A\x14F\x5\x30"+
		"\x19\x2\x14B\x14C\a\b\x2\x2\x14C\x14E\x5\x30\x19\x2\x14D\x14B\x3\x2\x2"+
		"\x2\x14E\x151\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2"+
		"\x150\x37\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x152\x157\x5:\x1E\x2\x153"+
		"\x154\a\b\x2\x2\x154\x156\x5:\x1E\x2\x155\x153\x3\x2\x2\x2\x156\x159\x3"+
		"\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x39\x3\x2\x2"+
		"\x2\x159\x157\x3\x2\x2\x2\x15A\x15F\a&\x2\x2\x15B\x15C\a\n\x2\x2\x15C"+
		"\x15E\a&\x2\x2\x15D\x15B\x3\x2\x2\x2\x15E\x161\x3\x2\x2\x2\x15F\x15D\x3"+
		"\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160;\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2"+
		"\x162\x163\x5> \x2\x163\x164\a*\x2\x2\x164\x165\a+\x2\x2\x165\x166\a,"+
		"\x2\x2\x166\x167\a*\x2\x2\x167\x168\a+\x2\x2\x168\x177\x3\x2\x2\x2\x169"+
		"\x16A\x5> \x2\x16A\x16B\a*\x2\x2\x16B\x16C\a+\x2\x2\x16C\x16D\a,\x2\x2"+
		"\x16D\x177\x3\x2\x2\x2\x16E\x173\x5> \x2\x16F\x170\a*\x2\x2\x170\x172"+
		"\a+\x2\x2\x171\x16F\x3\x2\x2\x2\x172\x175\x3\x2\x2\x2\x173\x171\x3\x2"+
		"\x2\x2\x173\x174\x3\x2\x2\x2\x174\x177\x3\x2\x2\x2\x175\x173\x3\x2\x2"+
		"\x2\x176\x162\x3\x2\x2\x2\x176\x169\x3\x2\x2\x2\x176\x16E\x3\x2\x2\x2"+
		"\x177=\x3\x2\x2\x2\x178\x180\x5:\x1E\x2\x179\x180\a\x11\x2\x2\x17A\x180"+
		"\a\x12\x2\x2\x17B\x180\a\x14\x2\x2\x17C\x180\a\x15\x2\x2\x17D\x180\a\x13"+
		"\x2\x2\x17E\x180\a\xF\x2\x2\x17F\x178\x3\x2\x2\x2\x17F\x179\x3\x2\x2\x2"+
		"\x17F\x17A\x3\x2\x2\x2\x17F\x17B\x3\x2\x2\x2\x17F\x17C\x3\x2\x2\x2\x17F"+
		"\x17D\x3\x2\x2\x2\x17F\x17E\x3\x2\x2\x2\x180?\x3\x2\x2\x2%\x44\x46QW^"+
		"hv|\x83\x89\xA0\xA5\xBC\xC1\xC3\xC9\xD6\xDB\xDE\xE5\xED\xF4\xF7\x104\x10F"+
		"\x11A\x132\x13C\x147\x14F\x157\x15F\x173\x176\x17F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LlvmDSCompiler
